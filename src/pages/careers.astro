---
import Layout from '../layouts/Layout.astro';
import { supabase } from '../lib/supabase';
import JobFilters from '../components/JobFilters';
import JobListing from '../components/careers/JobListing.astro';

// Keep SSR enabled for filtering
export const prerender = false;

// Get URL search parameters
const url = new URL(Astro.url);
const locationId = url.searchParams.get('locationId');
const department = url.searchParams.get('department');
const city = url.searchParams.get('city');
const search = url.searchParams.get('search'); // âœ… New keyword search param

// Build base query
let query = supabase
  .from('jobs')
  .select(`
    id,
    title,
    department,
    description,
    enhanced_job_description,
    employment_type,
    application_url,
    content_type_postrank,
    location,
    quirk_location:quirk_locations(
      id,
      title,
      slug,
      city,
      location_logo,
      location_featured_image
    )
  `)
  .eq('is_active', true);

// Apply filters
if (locationId) {
  query = query.eq('quirk_location_id', locationId);
}
if (department) {
  query = query.eq('department', department);
}
if (city) {
  query = query.eq('location', city);
}
if (search) {
  query = query.or(`title.ilike.%${search}%,description.ilike.%${search}%`);
}

// Sort by rank
query = query.order('content_type_postrank', { ascending: true });

// Execute queries in parallel
const [
  { data: jobs, error: jobsError },
  { data: departments },
  { data: locations },
  { data: cityData }
] = await Promise.all([
  query,
  supabase
    .from('jobs')
    .select('department')
    .not('department', 'is', null)
    .eq('is_active', true),
  supabase
    .from('quirk_locations')
    .select('id, title, city')
    .order('title'),
  supabase
    .from('jobs')
    .select('location')
    .eq('is_active', true)
]);

if (jobsError) {
  console.error('Error fetching jobs:', jobsError);
}

// Extract unique values
const uniqueDepartments = [...new Set(departments?.map(job => job.department).filter(Boolean))];
const uniqueCities = [...new Set(cityData?.map(job => job.location).filter(Boolean))];

// Initial filter values
const initialFilters = { 
  department: department || undefined,
  city: city || undefined,
  locationId: locationId || undefined,
  search: search || ''
};
---

<Layout title="Careers">
  <div class="min-h-screen bg-gray-100">
    <!-- Hero Section -->
    <div class="relative">
      <div class="absolute inset-0">
        <img 
          src="https://images.unsplash.com/photo-1552581234-26160f608093?auto=format&fit=crop&q=80" 
          alt="Team collaboration" 
          class="w-full h-full object-cover"
        />
        <div class="absolute inset-0 bg-primary opacity-80"></div>
      </div>
      <div class="relative max-w-7xl mx-auto py-24 px-4 sm:px-6 lg:px-8">
        <h1 class="text-4xl font-extrabold tracking-tight text-white sm:text-5xl lg:text-6xl">Join Our Team</h1>
        <p class="mt-6 text-xl text-white max-w-3xl">
          As one of Maine's largest privately-owned employers, we offer exceptional career opportunities and a supportive work environment where you can thrive.
        </p>
      </div>
    </div>

    <!-- Job Filters -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <JobFilters 
        client:load
        departments={uniqueDepartments}
        cities={uniqueCities}
        locations={locations || []}
        initialFilters={initialFilters}
        onFilterChange={(filters) => {
          const url = new URL(window.location);
          Object.entries(filters).forEach(([key, value]) => {
            if (value) {
              url.searchParams.set(key, value);
            } else {
              url.searchParams.delete(key);
            }
          });
          window.location.href = url.toString();
        }}
      />
    </div>

    <!-- Job Listings -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <JobListing 
        jobs={jobs || []}
        departments={uniqueDepartments}
        cities={uniqueCities}
        locations={locations || []}
        initialFilters={initialFilters}
      />
    </div>
  </div>
</Layout>

<style>
  /* Truncate Job Descriptions */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
